--
-- SELECT
--
CREATE TABLE nr (i int, j int, PRIMARY KEY (j ASC));
CREATE INDEX ON nr (i ASC);
INSERT INTO nr VALUES (1, 2), (3, 4);
BEGIN;
INSERT INTO nr VALUES (null, 6);
SELECT i FROM nr ORDER BY i;
 i
---
 1
 3

(3 rows)

SELECT i FROM nr ORDER BY i NULLS FIRST;
 i
---

 1
 3
(3 rows)

SELECT i FROM nr ORDER BY i DESC;
 i
---

 3
 1
(3 rows)

SELECT i FROM nr ORDER BY i DESC NULLS LAST;
 i
---
 3
 1

(3 rows)

ROLLBACK;
CREATE TABLE nr2 (i int, j int, PRIMARY KEY (j ASC));
CREATE INDEX ON nr2 (i DESC);
INSERT INTO nr2 VALUES (1, 2), (3, 4);
BEGIN;
INSERT INTO nr2 VALUES (null, 6);
SELECT i FROM nr2 ORDER BY i;
 i
---
 1
 3

(3 rows)

SELECT i FROM nr2 ORDER BY i NULLS FIRST;
 i
---

 1
 3
(3 rows)

SELECT i FROM nr2 ORDER BY i DESC;
 i
---

 3
 1
(3 rows)

SELECT i FROM nr2 ORDER BY i DESC NULLS LAST;
 i
---
 3
 1

(3 rows)

ROLLBACK;
--
-- Test reverse scans with limit.
--
CREATE TABLE reverse_scan_test (
  h BIGINT,
  r INT,
  PRIMARY KEY(h, r ASC)
);
INSERT INTO reverse_scan_test
VALUES (1, 1),
       (1, 2),
       (1, 3),
       (1, 4),
       (1, 5),
       (1, 6),
       (1, 7),
       (1, 8),
       (1, 9),
       (1, 10),
       (1, 11),
       (1, 12),
       (1, 13),
       (1, 14);
-- Check ascending order.
SELECT r FROM reverse_scan_test WHERE h = 1;
 r
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
(14 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint);
 r
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
(14 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 AND r > 2 and r < 9;
 r
---
 3
 4
 5
 6
 7
 8
(6 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) AND r > 2 and r < 9;
 r
---
 3
 4
 5
 6
 7
 8
(6 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 AND r > 2 and r < 9 LIMIT 5;
 r
---
 3
 4
 5
 6
 7
(5 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) AND r > 2 and r < 9 LIMIT 5;
 r
---
 3
 4
 5
 6
 7
(5 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 AND r >= 2 and r <= 13;
 r
----
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
(12 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) AND r >= 2 and r <= 13;
 r
----
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
(12 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 AND r >= 2 and r <= 13 LIMIT 10;
 r
----
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
(10 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) AND r >= 2 and r <= 13 LIMIT 10;
 r
----
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
(10 rows)

-- Test desc order (reverse scan).
SELECT r FROM reverse_scan_test WHERE h = 1 ORDER BY r DESC;
 r
----
 14
 13
 12
 11
 10
  9
  8
  7
  6
  5
  4
  3
  2
  1
(14 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) ORDER BY r DESC;
 r
----
 14
 13
 12
 11
 10
  9
  8
  7
  6
  5
  4
  3
  2
  1
(14 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 ORDER BY r DESC LIMIT 5;
 r
----
 14
 13
 12
 11
 10
(5 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) ORDER BY r DESC LIMIT 5;
 r
----
 14
 13
 12
 11
 10
(5 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 AND r < 9 ORDER BY r DESC LIMIT 5;
 r
---
 8
 7
 6
 5
 4
(5 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) AND r < 9 ORDER BY r DESC LIMIT 5;
 r
---
 8
 7
 6
 5
 4
(5 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 AND r > 1 AND r < 14 ORDER BY r DESC;
 r
----
 13
 12
 11
 10
  9
  8
  7
  6
  5
  4
  3
  2
(12 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) AND r > 1 AND r < 14 ORDER BY r DESC;
 r
----
 13
 12
 11
 10
  9
  8
  7
  6
  5
  4
  3
  2
(12 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 AND r > 1 AND r < 14 ORDER BY r DESC LIMIT 9;
 r
----
 13
 12
 11
 10
  9
  8
  7
  6
  5
(9 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) AND r > 1 AND r < 14 ORDER BY r DESC LIMIT 9;
 r
----
 13
 12
 11
 10
  9
  8
  7
  6
  5
(9 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 AND r >= 3 and r <= 13 ORDER BY r DESC;
 r
----
 13
 12
 11
 10
  9
  8
  7
  6
  5
  4
  3
(11 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) AND r >= 3 and r <= 13 ORDER BY r DESC;
 r
----
 13
 12
 11
 10
  9
  8
  7
  6
  5
  4
  3
(11 rows)

SELECT r FROM reverse_scan_test WHERE h = 1 AND r >= 3 and r <= 13 ORDER BY r DESC LIMIT 8;
 r
----
 13
 12
 11
 10
  9
  8
  7
  6
(8 rows)

SELECT r FROM reverse_scan_test WHERE yb_hash_code(h) = yb_hash_code(1::bigint) AND r >= 3 and r <= 13 ORDER BY r DESC LIMIT 8;
 r
----
 13
 12
 11
 10
  9
  8
  7
  6
(8 rows)

PREPARE myplan AS SELECT * FROM reverse_scan_test LIMIT $1;
-- Execute myplan > 5 times. After 5 times the plan should default to the
-- generic plan
EXECUTE myplan(0);
 h | r 
---+---
(0 rows)

EXPLAIN EXECUTE myplan(null);
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Seq Scan on reverse_scan_test  (cost=0.00..100.00 rows=1000 width=12)
(1 row)

EXECUTE myplan(1);
 h | r 
---+---
 1 | 1
(1 row)

EXECUTE myplan(2);
 h | r 
---+---
 1 | 1
 1 | 2
(2 rows)

EXECUTE myplan(3);
 h | r 
---+---
 1 | 1
 1 | 2
 1 | 3
(3 rows)

-- generic plan with limit node should be used
EXPLAIN EXECUTE myplan(null);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit  (cost=0.00..10.00 rows=100 width=12)
   ->  Seq Scan on reverse_scan_test  (cost=0.00..100.00 rows=1000 width=12)
(2 rows)

EXECUTE myplan(null);
 h | r  
---+----
 1 |  1
 1 |  2
 1 |  3
 1 |  4
 1 |  5
 1 |  6
 1 |  7
 1 |  8
 1 |  9
 1 | 10
 1 | 11
 1 | 12
 1 | 13
 1 | 14
(14 rows)

EXECUTE myplan(0);
 h | r 
---+---
(0 rows)

EXECUTE myplan(1);
 h | r 
---+---
 1 | 1
(1 row)
